{
  "name": "it",
  "description": "A testing framework for node",
  "version": "0.0.5",
  "keywords": [
    "testing",
    "test",
    "async",
    "function testing",
    "bdd",
    "unit",
    "unit testing"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:doug-martin/it.git"
  },
  "dependencies": {
    "comb": ">=0.1.2",
    "commander": ">=0.5.1"
  },
  "homepage": "http://doug-martin.github.com/it",
  "author": {
    "name": "Doug Martin",
    "url": "http://blog.dougamartin.com"
  },
  "main": "index.js",
  "bin": {
    "it": "./bin/it"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">= 0.6.1"
  },
  "readme": "It\n===\n\nOverview\n--------\n\nIt is a BDD testing framework for node.js. The premise behind it is to be as lightweight as possible while making testing easy and fun to do.\n\n## Installation\n\n    npm install it\n\nTo use the it executable\n\n    npm install -g it\n\n##Usage\n\nIt contains the following functions to write and run tests.\n\n  * describe - The name of object/context you are testing.\n  * should - the action that you are testing/should happen.\n  * beforeAll - an action that should happen before all tests in the current context.\n  * afterAll - an action that should happen after all tests in the current context.\n  * beforeEach - an action that should happen before each test in the current context.\n  * afterEach - an action that should happen before each test in the current context.\n\n###Synchronous tests\n\nWriting synchronous tests in **It** is extremely simple. So lets start off with an example.\n\nLets assume we have a Person Object\n\n```javascript \nvar Person = function (name, age) {\n    this.name = name;\n    this.age = age;\n\n    this.getOlder = function (years) {\n        if (years > 0) {\n            this.age = this.age + years;\n        }\n    };\n\n};\n```\n\nThe first tests we could run on person could be testing the setting of name and age.\n\n```javascript\n\nvar it = require(\"../index\"),\n    assert = require(\"assert\");\n\nit.describe(\"Person\", function (it) {\n\n    it.should(\"set set name\", function () {\n        var person = new Person(\"bob\", 1);\n        assert.equal(person.name, \"bob\");\n    });\n\n    it.should(\"set set age\", function () {\n        var person = new Person(\"bob\", 1);\n        assert.equal(person.age, 1);\n    });\n    \n});    \n    \n```\nNotice we use the **it** passed back to the describe callback.\n\nNext we could test different scenarios of Person#getOlder\n\n```javascript\nvar it = require(\"../index\"),\n    assert = require(\"assert\");\n\nit.describe(\"Person\", function (it) {\n\n    it.describe(\"#getOlder\", function (it) {\n\n        it.should(\"accept positive numbers\", function () {\n            var person = new Person(\"bob\", 1);\n            person.getOlder(2);\n            assert.equal(person.age, 3);\n        });\n\n        it.should(\"not apply negative numbers\", function () {\n            var person = new Person(\"bob\", 1);\n            person.getOlder(-2);\n            assert.equal(person.age, 1);\n        });\n    });\n\n});\n\n```\n\nIn this example we are describing the **getOlder** method and run different tests against it. \nNotice the **it** passed back is used again.\n\nYou may nest tests as deep as you like as long as you remember to use the proper **it**. \n\n```javascript\nit.describe(\"#getOlder nested\", function (it) {\n\n    it.describe(\"with positive numbers\", function (it) {\n        \n        it.should(\"work\", function () {\n            var person = new Person(\"bob\", 1);\n            person.getOlder(2);\n            assert.equal(person.age, 3);\n        });\n        \n    });\n\n    it.describe(\"with negative numbers\", function () {\n        \n        //uh oh wrong it \n        it.should(\"not work\", function () {\n            var person = new Person(\"bob\", 1);\n            person.getOlder(-2);\n            assert.equal(person.age, 1);\n        });\n        \n    });\n\n});\n```\n\n###Asynchronous tests \n\nWriting asynchronous tests in **It** is just as easy as writing synchronous tests.\n\nLets modify Person to make get older async\n\n```javascript\nvar Person = function (name, age) {\n    this.name = name;\n    this.age = age;\n\n    this.getOlder = function (years, cb) {\n        setTimeout(function () {\n            this.age = this.age + years;\n            cb.call(this, null, this);\n        }.bind(this), years * 500);\n    };\n};\n```\n\nNow that **getOlder** is async lets test it\n\n```javascript\nit.describe(\"#getOlder\", function (it) {\n    //Call with next\n    it.should(\"accept positive numbers\", function (next) {\n        var person = new Person(\"bob\", 1);\n        person.getOlder(2, function (err, person) {\n            assert.equal(person.age, 3);\n            next();\n        });\n    });\n\n    //return promise\n    it.should(\"not apply negative numbers\", function () {\n        var ret = new comb.Promise();\n        var person = new Person(\"bob\", 1);\n        person.getOlder(-2, function (err, person) {\n            assert.equal(person.age, 1);\n            ret.callback();\n        });\n        return ret;\n    });\n});\n```\n\nSo in the above example the first **should** invocation accepts a **next** argument which is a function that should\nbe called when the current test is done. If **next**'s function signature is **next(err, ...)**. So if next is invoked\nwith a first argument other than null or undefined then it is assumed that the test errored.\n\nThe second **should** used a promise as a return value if you have used **comb** or any other framework that uses \n**Promises** then this will feel pretty natural to you. The test will wait for the promise to resolve before \ncontinuing any other tests.\n\n###Running Tests\n\nTo run tests there are two options the **it** executable \n\nOptions\n  \n  * -d, --directory : The root directory of your tests\n  * -r, --reporter : The reporter to use when running the tests\n  * --cov-html : create coverage output in html, if an output path is included then the file will be written to that file otherwise it will defalt to `./coverage.html`\n  * --reporters : Display a list of reporters that are available\n  * -h, --help : Displays help.\n\nTo run an entire suite\n\n    it -d ./mytests -r dotmatrix\n\n\nTo run an individual test\n\n    it ./mytests/person.test.js\n    \n\nYou can alternatively run the test directly\n\n```javascript\n\nit.describe(\"A Person\", function(it){\n\n     it.should(\"set set name\", function () {\n        var person = new Person(\"bob\", 1);\n        assert.equal(person.name, \"bob\");\n    });\n\n    it.should(\"set set age\", function () {\n        var person = new Person(\"bob\", 1);\n        assert.equal(person.age, 1);\n    });\n    \n    it.run();\n\n});\n\n```\n\n###Code Coverage\nIf you use [node-jscoverage](https://github.com/visionmedia/node-jscoverage) to generate coverage then by default `it`\nwill output a coverage report. You may also output coverage to an `HTML` file by passing in the `--cov-html` flag to the executable.\nFor example out put see [patio test coverage](http://c2fo.github.com/patio/coverage.html).\n\n\n\n###Reporters\n\n**It** currently has two reporters built in \n  * spec\n  * dotmatrix\n \nFor the above tests the output for spec should look as follows\n\n```\nPerson\n\n    √ should set set name (0ms)\n\t√ should set set age (0ms)\n\t#getOlder\n\t\t√ should accept positive numbers (1002ms)\n\t\t√ should not apply negative numbers (0ms)\nFinished in  1.002s\n4 examples, 0 errors\n\n```\n\nWith dot matrix\n\n```\nPerson\n\n....\nFinished in  1.002s\n4 examples, 0 errors\n```\n\n###Assert extensions\n\nThe following methods are added to assert for convenience\n\n  * lengthOf - assert the length of an array\n  * isTrue - assert that a value is true\n  * isFalse - assert that a value is false \n  * isRegExp - assert that a value is a Regular Expression\n  * isArray - assert that a value is an Array\n  * isHash - assert that a value is a plain object\n  * isObject - assert that a value is a object\n  * isNumber - assert that a value is a Number\n  * isDate - assert that a value is a Date\n  * isBoolean - assert that a value is a Boolean\n  * isString - assert that a value is a String\n  * isUndefined - assert that a value is undefined\n  * isUndefinedOrNull - assert that a value is undefined or null\n  * isPromiseLike - assert that a value is Promise like (contains the funtions \"then\", \"addErrback\", and \"addCallback\")\n  * isFunction - assert that a value is a function\n  * isNull - assert that a value is null\n  * isNotNull - assert that a value is not null\n  * instanceOf - assert that a value is an instanceof a particular object\n\nLicense\n-------\n\nMIT <https://github.com/doug-martin/it/raw/master/LICENSE>\n\nMeta\n----\n\n* Code: `git clone git://github.com/doug-martin/it.git`\n",
  "readmeFilename": "readme.md",
  "_id": "it@0.0.5",
  "dist": {
    "shasum": "03ce4bca3eb373c622ba3c5cebbd4c5531f8a28c"
  },
  "_from": "it@0.0.5",
  "_resolved": "https://registry.npmjs.org/it/-/it-0.0.5.tgz"
}
