#!/usr/bin/env node

var path = require("path"),
    exec = require("child_process").exec,
    comb = require("comb"),
    compact = comb.array.compact,
    sys = require("util"),
    string = comb.string,
    it = require("../index");
var program = require('commander');


program
    .version('0.0.1')
    .option('-d, --directory <path>', 'Directory of tests')
    .option('-r, --reporter [string]', 'reporter')
    .option('--cov-html [path]', 'create coverage output in html')
    .option('--reporters', 'display available reporters')
    .on("reporters", function () {
        console.log(["", "Reporters:", "\tspec", "\tdotmatrix", ""].join("\n"));
        process.exit();
    })
    .parse(process.argv);

var prog = program.args.shift() || null;
var directory = program.directory || process.cwd() + "/test";

var covType = "coverage", covOut = null;
if (program.covHtml) {
    covType = "coverageHtml";
    if (!comb.isBoolean(program.covHtml)) {
        covOut = program.covHtml;
    }
}


var runTests = function (files) {
    return comb.serial(comb.array.compact(files.map(function (f) {
        var suite = require(f);
        if (program.reporter) {
            suite.reporter = program.reporter;
        }
        return suite.run ? suite.run.bind(suite) : null;
    }))).chain(function (results) {
            var its = {};
            results.forEach(function (summary) {
                comb.merge(its, summary);
            });
            return it.printSummary(its);
        });
};

var startTests = function () {
    var ret = new comb.Promise();
    if (prog) {
        console.log(prog);
        runTests(prog.split(",").map(function (p) {
            return path.resolve(p);
        }));
    } else {
        exec("find \"" + directory + "\" -name *.test.js", function (err, stdout) {
            if (err) ret.errback(err);
            var files = compact(stdout.split("\n").map(function (f) {
                if (f !== '') {
                    return path.resolve(f);
                }
            }));
            if (files.length) {
                runTests(files).then(comb.hitch(ret, "callback"), comb.hitch(ret, "errback"));
            } else {
                ret.callback();
            }

        });
    }
    return ret;
};


var orig = process.emit;
process.emit = function (event) {
    if (event === 'exit') {
        if (typeof _$jscoverage === 'object') {
            it.printCoverage(covType, _$jscoverage, covOut);
        }
        orig.apply(this, arguments);
    } else {
        orig.apply(this, arguments);
    }
};
startTests().then(
    function (code) {
        process.exit(code);
    },
    function (error) {
        console.log(error);
        process.exit(1);
    }
);



